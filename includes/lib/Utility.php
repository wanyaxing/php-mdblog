<?php
class Utility{

    public static $randKey = null;

    public static $colors = [
                                // https://www.materialui.co/colors
                                // [244,67,54],[233,30,99],[156,39,176],[103,58,183],[63,81,181],[33,150,243],[3,169,244],[0,188,212],[0,150,136],[76,175,80],[139,195,74],[205,220,57],[255,235,59],[255,193,7],[255,152,0],[255,87,34],[121,85,72],[158,158,158],[96,125,139],[255,235,238],[252,228,236],[243,229,245],[237,231,246],[232,234,246],[227,242,253],[225,245,254],[224,247,250],[224,242,241],[232,245,233],[241,248,233],[249,251,231],[255,253,231],[255,248,225],[255,243,224],[251,233,231],[239,235,233],[250,250,250],[236,239,241],[255,205,210],[248,187,208],[225,190,231],[209,196,233],[197,202,233],[187,222,251],[179,229,252],[178,235,242],[178,223,219],[200,230,201],[220,237,200],[240,244,195],[255,249,196],[255,236,179],[255,224,178],[255,204,188],[215,204,200],[245,245,245],[207,216,220],[239,154,154],[244,143,177],[206,147,216],[179,157,219],[159,168,218],[144,202,249],[129,212,250],[128,222,234],[128,203,196],[165,214,167],[197,225,165],[230,238,156],[255,245,157],[255,224,130],[255,204,128],[255,171,145],[188,170,164],[238,238,238],[176,190,197],[229,115,115],[240,98,146],[186,104,200],[149,117,205],[121,134,203],[100,181,246],[79,195,247],[77,208,225],[77,182,172],[129,199,132],[174,213,129],[220,231,117],[255,241,118],[255,213,79],[255,183,77],[255,138,101],[161,136,127],[224,224,224],[144,164,174],[239,83,80],[236,64,122],[171,71,188],[126,87,194],[92,107,192],[66,165,245],[41,182,246],[38,198,218],[38,166,154],[102,187,106],[156,204,101],[212,225,87],[255,238,88],[255,202,40],[255,167,38],[255,112,67],[141,110,99],[189,189,189],[120,144,156],[244,67,54],[233,30,99],[156,39,176],[103,58,183],[63,81,181],[33,150,243],[3,169,244],[0,188,212],[0,150,136],[76,175,80],[139,195,74],[205,220,57],[255,235,59],[255,193,7],[255,152,0],[255,87,34],[121,85,72],[158,158,158],[96,125,139],[229,57,53],[216,27,96],[142,36,170],[94,53,177],[57,73,171],[30,136,229],[3,155,229],[0,172,193],[0,137,123],[67,160,71],[124,179,66],[192,202,51],[253,216,53],[255,179,0],[251,140,0],[244,81,30],[109,76,65],[117,117,117],[84,110,122],[211,47,47],[194,24,91],[123,31,162],[81,45,168],[48,63,159],[25,118,210],[2,136,209],[0,151,167],[0,121,107],[56,142,60],[104,159,56],[175,180,43],[251,192,45],[255,160,0],[245,124,0],[230,74,25],[93,64,55],[97,97,97],[69,90,100],[198,40,40],[173,20,87],[106,27,154],[69,39,160],[40,53,147],[21,101,192],[2,119,189],[0,131,143],[0,105,92],[46,125,50],[85,139,47],[158,157,36],[249,168,37],[255,143,0],[239,108,0],[216,67,21],[78,52,46],[66,66,66],[55,71,79],[183,28,28],[136,14,79],[74,20,140],[49,27,146],[26,35,126],[13,71,161],[1,87,155],[0,96,100],[0,77,64],[27,94,32],[51,105,30],[130,119,23],[245,127,23],[255,111,0],[230,81,0],[191,54,12],[62,39,35],[33,33,33],[38,50,56],[255,138,128],[255,128,171],[234,128,252],[179,136,255],[140,158,255],[130,177,255],[128,216,255],[132,255,255],[167,255,235],[185,246,202],[204,255,144],[244,255,129],[255,255,141],[255,229,127],[255,209,128],[255,158,128],[255,82,82],[255,64,129],[224,64,251],[124,77,255],[83,109,254],[68,138,255],[64,196,255],[24,255,255],[100,255,218],[105,240,174],[178,255,89],[238,255,65],[255,255,0],[255,215,64],[255,171,64],[255,110,64],[255,23,68],[245,0,87],[213,0,249],[101,31,255],[61,90,254],[41,121,255],[0,176,255],[0,229,255],[29,233,182],[0,230,118],[118,255,3],[198,255,0],[255,234,0],[255,196,0],[255,145,0],[255,61,0],[213,0,0],[197,17,98],[170,0,255],[98,0,234],[48,79,254],[41,98,255],[0,145,234],[0,184,212],[0,191,165],[0,200,83],[100,221,23],[174,234,0],[255,214,0],[255,171,0],[255,109,0],[221,44,0],
                                // https://www.materialui.co/htmlcolors
                                [220,220,220],[211,211,211],[192,192,192],[169,169,169],[128,128,128],[105,105,105],[119,136,153],[112,128,144],[47,79,79],[0,0,0],[255,248,220],[255,235,205],[255,228,196],[255,222,173],[245,222,179],[222,184,135],[210,180,140],[188,143,143],[244,164,96],[218,165,32],[184,134,11],[205,133,63],[210,105,30],[139,69,19],[160,82,45],[165,42,42],[128,0,0],[205,92,92],[240,128,128],[250,128,114],[233,150,122],[255,160,122],[220,20,60],[255,0,0],[178,34,34],[139,0,0],[255,192,203],[255,182,193],[255,105,180],[255,20,147],[199,21,133],[219,112,147],[255,160,122],[255,127,80],[255,99,71],[255,69,0],[255,140,0],[255,165,0],[255,215,0],[255,255,0],[255,255,224],[255,250,205],[250,250,210],[255,239,213],[255,228,181],[255,218,185],[238,232,170],[240,230,140],[189,183,107],[173,255,47],[127,255,0],/*[124,252,0],*/[0,255,0],[50,205,50],[152,251,152],[144,238,144],[0,250,154],[0,255,127],[60,179,113],[46,139,87],[34,139,34],[0,128,0],[0,100,0],[154,205,50],[107,142,35],[128,128,0],[85,107,47],[102,205,170],[143,188,139],[32,178,170],[0,139,139],[0,128,128],[230,230,250],[216,191,216],[221,160,221],[238,130,238],[218,112,214],[255,0,255],[255,0,255],[186,85,211],[147,112,219],[102,51,153],[138,43,226],[148,0,211],[153,50,204],[139,0,139],[128,0,128],[75,0,130],[106,90,205],[72,61,139],[123,104,238],[0,255,255],[0,255,255],[224,255,255],[175,238,238],[127,255,212],[64,224,208],[72,209,204],[0,206,209],[95,158,160],[70,130,180],[176,196,222],[176,224,230],[173,216,230],[135,206,235],[135,206,250],[0,191,255],[30,144,255],[100,149,237],[123,104,238],[65,105,225],[0,0,255],[0,0,205],[0,0,139],[0,0,128],[25,25,112],/*[255,255,255],*/[255,250,250],[240,255,240],[245,255,250],[240,255,255],[240,248,255],[248,248,255],[245,245,245],[255,245,238],[245,245,220],[253,245,230],[255,250,240],[255,255,240],[250,235,215],[250,240,230],[255,240,245],[255,228,225]
                            ];

    /*只要固定起始key，则依次取得的随机数永远固定。*/
    public static function rand( $min=null , $max=null, $key=null)
    {
        if (is_null($key))
        {
            $key = static::$randKey;
        }
        static::$randKey = md5($key);
        $tMax = 99999;
        $t = substr(preg_replace('/[^\d]/','',md5($key)),0,5) ;
        return intval(round($min + ($max+1-$min) * ($t+1) / ($tMax+2) - 0.5,0));
    }

    /**
     * 目标值是否数字（或数字组成的字符串）
     * @param  int|string  $_v [description]
     * @return boolean      [description]
     */
    public static function is_int($_v)
    {
        return is_int($_v) || (strval(intval($_v))===strval($_v));
    }

    /**
     * 将时间转化成时间戳
     * @param  [string | int | DateTime] $p_time [description]
     * @return [int]         时间戳
     */
    public static function strtotime($p_time=null)
    {
        if ($p_time===null || $p_time=='time()')
        {
            return time();
        }
        else
        {
            $time = null;
            if (static::is_int($p_time) && strlen($p_time)==13 )
            {
                $p_time = substr($p_time,0,10);
            }
            $p_time = preg_replace_callback('/^(\d{4})(\d\d)(\d\d)(\d\d)(\d\d)(\d\d)$/',function($matches){
                if (
                       $matches[1]>=1970 && $matches[1]<=2999
                    && $matches[2]>=1 && $matches[2]<=12
                    && $matches[3]>=1 && $matches[3]<=31
                    && $matches[4]>=0 && $matches[4]<=24
                    && $matches[5]>=0 && $matches[5]<=60
                    && $matches[6]>=0 && $matches[6]<=60
                )
                {
                    return $matches[1] . '-' . $matches[2] . '-' . $matches[3]  . ' ' . $matches[4] . ':' . $matches[5]. ':' . $matches[6] ;
                }
                return $matches[0];
            },$p_time);
            $p_time = preg_replace_callback('/^(\d{4})(\d\d)(\d\d)$/',function($matches){
                if (
                       $matches[1]>=1970 && $matches[1]<=2999
                    && $matches[2]>=1 && $matches[2]<=12
                    && $matches[3]>=1 && $matches[3]<=31
                )
                {
                    return $matches[1] . '-' . $matches[2] . '-' . $matches[3];
                }
                return $matches[0];
            },$p_time);
            $strtotime = strtotime($p_time);
            if (static::is_int($p_time) )
            {
                if (preg_match('/(\d{4})(\d\d)(\d\d)(\d\d)(\d\d)(\d\d)//'))
                if ($p_time>=19700101 && $p_time<=20991231 && strtotime(date('Y-m-d H:i:s',$strtotime)) == $strtotime)
                {//1970 - 2099
                    $time = $strtotime;
                }
                else
                {
                    $time = intval($p_time);
                }
                // if (strtotime(date('Y-m-d H:i:s',$p_time))==$p_time)
                // {
                // }
            }
            else if (strtotime(date('Y-m-d H:i:s',$strtotime)) == $strtotime )
            {
                $time = $strtotime;
            }
            else if (is_subclass_of($p_time,'DateTime'))
            {
                $time = $p_time->getTimestamp();
            }
            else
            {
                return time();
            }
            return $time;
        }
    }

    /**
     * 将时间转化成字符串
     * @param  [string | int | DateTime] $p_time [description]
     * @param  string $p_format [description]
     * @return [string]           时间字符串
     */
    public static function timetostr($p_time=null,$p_format='Y-m-d H:i:s')
    {
        return date($p_format,static::strtotime($p_time));
    }

    public static function getDescription($text,$ignoreStrings=array())
    {
        if (isset($ignoreStrings) && !is_array($ignoreStrings))
        {
            $ignoreStrings = array($ignoreStrings);
        }
        $text = str_replace(array("\r\n", "\r"), "\n", $text);
        $text = trim($text, "\n");
        $lines = explode("\n", $text);
        $description = [];
        foreach ($lines as $line) {
            if ($line != '')
            {
                $isIgnore = false;
                foreach ($ignoreStrings as $ignoreStr) {
                    if (strpos($line,$ignoreStr)!==false)
                    {
                        $isIgnore = true;
                        break;
                    }
                }
                if (!$isIgnore)
                {
                    $description[] = preg_replace('/\[(.*?)\]\((.*?)\)/','$1',$line)."\n";
                    if (count($description)>=3)
                    {
                        break;
                    }
                }
            }
        }
        return '<p>'.implode('</p><p>',$description).'</p>';
    }

    public static function getInfoOfDir($dir)
    {
        $mdFile = null;
        foreach (glob($dir.'/*.md') as $_file) {
            $mdFile = $_file;
            break;
        }
        return Utility::getInfoOfFile($mdFile);
    }
    public static function getInfoOfFile($file)
    {
        if (file_exists($file))
        {
            $fTime = preg_replace('/^.*?\/(\d+)\/(.*?)\.md$/','$1',$file);
            $fTitle = preg_replace('/^.*?\/(\d+)\/(.*?)\.md$/','$2',$file);
            $item['fTitle'] = $fTitle;
            $item['fTime'] = $fTime;
            $item['fTimeLocal'] = static::timetostr($fTime);
            $item['link'] = './' . $fTime . '.html';
            $item['description'] = Utility::getDescription(file_get_contents($file),$fTitle);
            return $item;
        }
        return null;
    }


    public static function rgbRand($isDark=null)
    {
        if ($isDark===null)
        {
            $isDark = rand(0,1);
        }
        while(true)
        {
            // $c = [];
            // $c[]   = Utility::rand(0,255);
            // $c[]   = Utility::rand(0,255);
            // $c[]   = Utility::rand(0,255);
            // $c = Utility::$colors[Utility::rand(0,count(Utility::$colors)-1)];
            $c = Utility::$colors[array_rand(Utility::$colors)];
            // echo (($c[0] /255 * 299) + ($c[1] /255 * 587) + ($c[2] /255 * 114));exit;
            // https://stackoverflow.com/questions/2509443/check-if-uicolor-is-dark-or-bright
            $colorBrightness =  (($c[0] / 255 * 299) + ($c[1] / 255 * 587) + ($c[2] / 255 * 114)) / 1000;
            if ($colorBrightness<0.7)
            {
                if ($isDark)
                {
                    break;
                }
            }
            else
            {
                if (!$isDark)
                {
                    break;
                }
            }
        }

        return sprintf('rgb(%d,%d,%d)',$c[0],$c[1],$c[2]);
    }

    /*当前请求是否ajax请求*/
    public static function isAjax()
    {
        $headers = getallheaders();
        return isset($headers['X-Requested-With']) && $headers['X-Requested-With']=='XMLHttpRequest';
    }

}
